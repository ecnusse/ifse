        -:    0:Source:src/tee.c
        -:    0:Graph:tee.gcno
        -:    0:Data:tee.gcda
        -:    0:Runs:2
        -:    1:/* tee - read from standard input and write to standard output and files.
        -:    2:   Copyright (C) 1985-2023 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:/* Mike Parker, Richard M. Stallman, and David MacKenzie */
        -:   18:
        -:   19:#include <config.h>
        -:   20:#include <sys/types.h>
        -:   21:#include <signal.h>
        -:   22:#include <getopt.h>
        -:   23:
        -:   24:#include "system.h"
        -:   25:#include "argmatch.h"
        -:   26:#include "fadvise.h"
        -:   27:#include "iopoll.h"
        -:   28:#include "stdio--.h"
        -:   29:#include "xbinary-io.h"
        -:   30:#include "iopoll.h"
        -:   31:
        -:   32:/* The official name of this program (e.g., no 'g' prefix).  */
        -:   33:#define PROGRAM_NAME "tee"
        -:   34:
        -:   35:#define AUTHORS \
        -:   36:  proper_name ("Mike Parker"), \
        -:   37:  proper_name ("Richard M. Stallman"), \
        -:   38:  proper_name ("David MacKenzie")
        -:   39:
        -:   40:static bool tee_files (int nfiles, char **files, bool);
        -:   41:
        -:   42:/* If true, append to output files rather than truncating them. */
        -:   43:static bool append;
        -:   44:
        -:   45:/* If true, ignore interrupts. */
        -:   46:static bool ignore_interrupts;
        -:   47:
        -:   48:enum output_error
        -:   49:  {
        -:   50:    output_error_sigpipe,      /* traditional behavior, sigpipe enabled.  */
        -:   51:    output_error_warn,         /* warn on EPIPE, but continue.  */
        -:   52:    output_error_warn_nopipe,  /* ignore EPIPE, continue.  */
        -:   53:    output_error_exit,         /* exit on any output error.  */
        -:   54:    output_error_exit_nopipe   /* exit on any output error except EPIPE.  */
        -:   55:  };
        -:   56:
        -:   57:static enum output_error output_error;
        -:   58:
        -:   59:static struct option const long_options[] =
        -:   60:{
        -:   61:  {"append", no_argument, nullptr, 'a'},
        -:   62:  {"ignore-interrupts", no_argument, nullptr, 'i'},
        -:   63:  {"output-error", optional_argument, nullptr, 'p'},
        -:   64:  {GETOPT_HELP_OPTION_DECL},
        -:   65:  {GETOPT_VERSION_OPTION_DECL},
        -:   66:  {nullptr, 0, nullptr, 0}
        -:   67:};
        -:   68:
        -:   69:static char const *const output_error_args[] =
        -:   70:{
        -:   71:  "warn", "warn-nopipe", "exit", "exit-nopipe", nullptr
        -:   72:};
        -:   73:static enum output_error const output_error_types[] =
        -:   74:{
        -:   75:  output_error_warn, output_error_warn_nopipe,
        -:   76:  output_error_exit, output_error_exit_nopipe
        -:   77:};
        -:   78:ARGMATCH_VERIFY (output_error_args, output_error_types);
        -:   79:
        -:   80:void
function usage called 1 returned 0% blocks executed 30%
        1:   81:usage (int status)
        -:   82:{
        1:   83:  if (status != EXIT_SUCCESS)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   84:    emit_try_help ();
call    0 returned 100%
        -:   85:  else
        -:   86:    {
    #####:   87:      printf (_("Usage: %s [OPTION]... [FILE]...\n"), program_name);
call    0 never executed
    #####:   88:      fputs (_("\
call    0 never executed
        -:   89:Copy standard input to each FILE, and also to standard output.\n\
        -:   90:\n\
        -:   91:  -a, --append              append to the given FILEs, do not overwrite\n\
        -:   92:  -i, --ignore-interrupts   ignore interrupt signals\n\
        -:   93:"), stdout);
    #####:   94:      fputs (_("\
call    0 never executed
        -:   95:  -p                        operate in a more appropriate MODE with pipes.\n\
        -:   96:      --output-error[=MODE]   set behavior on write error.  See MODE below\n\
        -:   97:"), stdout);
    #####:   98:      fputs (HELP_OPTION_DESCRIPTION, stdout);
call    0 never executed
    #####:   99:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
call    0 never executed
    #####:  100:      fputs (_("\
call    0 never executed
        -:  101:\n\
        -:  102:MODE determines behavior with write errors on the outputs:\n\
        -:  103:  warn           diagnose errors writing to any output\n\
        -:  104:  warn-nopipe    diagnose errors writing to any output not a pipe\n\
        -:  105:  exit           exit on error writing to any output\n\
        -:  106:  exit-nopipe    exit on error writing to any output not a pipe\n\
        -:  107:The default MODE for the -p option is 'warn-nopipe'.\n\
        -:  108:With \"nopipe\" MODEs, exit immediately if all outputs become broken pipes.\n\
        -:  109:The default operation when --output-error is not specified, is to\n\
        -:  110:exit immediately on error writing to a pipe, and diagnose errors\n\
        -:  111:writing to non pipe outputs.\n\
        -:  112:"), stdout);
    #####:  113:      emit_ancillary_info (PROGRAM_NAME);
call    0 never executed
        -:  114:    }
        1:  115:  exit (status);
        -:  116:}
        -:  117:
        -:  118:int
function main called 2 returned 50% blocks executed 45%
        2:  119:main (int argc, char **argv)
        -:  120:{
        -:  121:  initialize_main (&argc, &argv);
        2:  122:  set_program_name (argv[0]);
call    0 returned 100%
        2:  123:  setlocale (LC_ALL, "");
call    0 returned 100%
        -:  124:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  125:  textdomain (PACKAGE);
        -:  126:
        2:  127:  atexit (close_stdout);
call    0 returned 100%
        -:  128:
        2:  129:  append = false;
        2:  130:  ignore_interrupts = false;
        -:  131:
        -:  132:  int optc;
        2:  133:  while ((optc = getopt_long (argc, argv, "aip", long_options, nullptr)) != -1)
call    0 returned 100%
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
        -:  134:    {
        1:  135:      switch (optc)
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        -:  136:        {
    #####:  137:        case 'a':
    #####:  138:          append = true;
    #####:  139:          break;
        -:  140:
    #####:  141:        case 'i':
    #####:  142:          ignore_interrupts = true;
    #####:  143:          break;
        -:  144:
    #####:  145:        case 'p':
    #####:  146:          if (optarg)
branch  0 never executed
branch  1 never executed
    #####:  147:            output_error = XARGMATCH ("--output-error", optarg,
call    0 never executed
        -:  148:                                      output_error_args, output_error_types);
        -:  149:          else
    #####:  150:            output_error = output_error_warn_nopipe;
    #####:  151:          break;
        -:  152:
    #####:  153:        case_GETOPT_HELP_CHAR;
call    0 never executed
        -:  154:
    #####:  155:        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  156:
        1:  157:        default:
        1:  158:          usage (EXIT_FAILURE);
call    0 returned 0%
        -:  159:        }
        -:  160:    }
        -:  161:
        1:  162:  if (ignore_interrupts)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  163:    signal (SIGINT, SIG_IGN);
call    0 never executed
        -:  164:
        1:  165:  if (output_error != output_error_sigpipe)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  166:    signal (SIGPIPE, SIG_IGN);
call    0 never executed
        -:  167:
        -:  168:  /* Whether to detect and close a broken pipe output.
        -:  169:     There is no need if the input is always ready for reading.  */
        2:  170:  bool pipe_check = ((output_error == output_error_warn_nopipe
        1:  171:                      || output_error == output_error_exit_nopipe)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       2*:  172:                     && iopoll_input_ok (STDIN_FILENO));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  173:
        -:  174:  /* Do *not* warn if tee is given no file arguments.
        -:  175:     POSIX requires that it work when given no arguments.  */
        -:  176:
        1:  177:  bool ok = tee_files (argc - optind, &argv[optind], pipe_check);
call    0 returned 100%
        1:  178:  if (close (STDIN_FILENO) != 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  179:    error (EXIT_FAILURE, errno, "%s", _("standard input"));
call    0 never executed
        -:  180:
        1:  181:  return ok ? EXIT_SUCCESS : EXIT_FAILURE;
        -:  182:}
        -:  183:
        -:  184:
        -:  185:/* Return the index of the first non-null descriptor after idx,
        -:  186:   or -1 if all are null.  */
        -:  187:
        -:  188:static int
function get_next_out called 0 returned 0% blocks executed 0%
    #####:  189:get_next_out (FILE **descriptors, int nfiles, int idx)
        -:  190:{
    #####:  191:  for (idx++; idx <= nfiles; idx++)
branch  0 never executed
branch  1 never executed
    #####:  192:    if (descriptors[idx])
branch  0 never executed
branch  1 never executed
    #####:  193:      return idx;
    #####:  194:  return -1;  /* no outputs remaining */
        -:  195:}
        -:  196:
        -:  197:/* Remove descriptors[i] due to write failure or broken pipe.
        -:  198:   Return true if this indicates a reportable error.  */
        -:  199:
        -:  200:static bool
function fail_output called 0 returned 0% blocks executed 0%
    #####:  201:fail_output (FILE **descriptors, char **files, int i)
        -:  202:{
    #####:  203:  int w_errno = errno;
    #####:  204:  bool fail = errno != EPIPE
    #####:  205:              || output_error == output_error_exit
branch  0 never executed
branch  1 never executed
    #####:  206:              || output_error == output_error_warn;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  207:  if (descriptors[i] == stdout)
branch  0 never executed
branch  1 never executed
    #####:  208:    clearerr (stdout); /* Avoid redundant close_stdout diagnostic.  */
call    0 never executed
    #####:  209:  if (fail)
branch  0 never executed
branch  1 never executed
        -:  210:    {
    #####:  211:      error (output_error == output_error_exit
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  212:             || output_error == output_error_exit_nopipe,
        -:  213:             w_errno, "%s", quotef (files[i]));
        -:  214:    }
    #####:  215:  descriptors[i] = nullptr;
    #####:  216:  return fail;
        -:  217:}
        -:  218:
        -:  219:
        -:  220:/* Copy the standard input into each of the NFILES files in FILES
        -:  221:   and into the standard output.  As a side effect, modify FILES[-1].
        -:  222:   Return true if successful.  */
        -:  223:
        -:  224:static bool
function tee_files called 1 returned 100% blocks executed 33%
        1:  225:tee_files (int nfiles, char **files, bool pipe_check)
        -:  226:{
        1:  227:  size_t n_outputs = 0;
        -:  228:  FILE **descriptors;
        -:  229:  bool *out_pollable IF_LINT ( = nullptr);
        -:  230:  char buffer[BUFSIZ];
        1:  231:  ssize_t bytes_read = 0;
        -:  232:  int i;
        1:  233:  int first_out = 0;  /* idx of first non-null output in descriptors */
        1:  234:  bool ok = true;
       1*:  235:  char const *mode_string =
        -:  236:    (O_BINARY
        -:  237:     ? (append ? "ab" : "wb")
        1:  238:     : (append ? "a" : "w"));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  239:
        1:  240:  xset_binary_mode (STDIN_FILENO, O_BINARY);
call    0 returned 100%
        1:  241:  xset_binary_mode (STDOUT_FILENO, O_BINARY);
call    0 returned 100%
        1:  242:  fadvise (stdin, FADVISE_SEQUENTIAL);
call    0 returned 100%
        -:  243:
        -:  244:  /* Set up FILES[0 .. NFILES] and DESCRIPTORS[0 .. NFILES].
        -:  245:     In both arrays, entry 0 corresponds to standard output.  */
        -:  246:
        1:  247:  descriptors = xnmalloc (nfiles + 1, sizeof *descriptors);
call    0 returned 100%
        1:  248:  if (pipe_check)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  249:    out_pollable = xnmalloc (nfiles + 1, sizeof *out_pollable);
call    0 never executed
        1:  250:  files--;
        1:  251:  descriptors[0] = stdout;
        1:  252:  if (pipe_check)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  253:    out_pollable[0] = iopoll_output_ok (fileno (descriptors[0]));
call    0 never executed
call    1 never executed
        1:  254:  files[0] = bad_cast (_("standard output"));
call    0 returned 100%
        1:  255:  setvbuf (stdout, nullptr, _IONBF, 0);
call    0 returned 100%
        1:  256:  n_outputs++;
        -:  257:
       1*:  258:  for (i = 1; i <= nfiles; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  259:    {
        -:  260:      /* Do not treat "-" specially - as mandated by POSIX.  */
    #####:  261:       descriptors[i] = fopen (files[i], mode_string);
call    0 never executed
    #####:  262:      if (descriptors[i] == nullptr)
branch  0 never executed
branch  1 never executed
        -:  263:        {
    #####:  264:          if (pipe_check)
branch  0 never executed
branch  1 never executed
    #####:  265:            out_pollable[i] = false;
    #####:  266:          error (output_error == output_error_exit
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  267:                 || output_error == output_error_exit_nopipe,
        -:  268:                 errno, "%s", quotef (files[i]));
    #####:  269:          ok = false;
        -:  270:        }
        -:  271:      else
        -:  272:        {
    #####:  273:          if (pipe_check)
branch  0 never executed
branch  1 never executed
    #####:  274:            out_pollable[i] = iopoll_output_ok (fileno (descriptors[i]));
call    0 never executed
call    1 never executed
    #####:  275:          setvbuf (descriptors[i], nullptr, _IONBF, 0);
call    0 never executed
    #####:  276:          n_outputs++;
        -:  277:        }
        -:  278:    }
        -:  279:
        2:  280:  while (n_outputs)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  281:    {
       2*:  282:      if (pipe_check && out_pollable[first_out])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  283:        {
        -:  284:          /* Monitor for input, or errors on first valid output.  */
    #####:  285:          int err = iopoll (STDIN_FILENO, fileno (descriptors[first_out]),
call    0 never executed
call    1 never executed
        -:  286:                            true);
        -:  287:
        -:  288:          /* Close the output if it became a broken pipe.  */
    #####:  289:          if (err == IOPOLL_BROKEN_OUTPUT)
branch  0 never executed
branch  1 never executed
        -:  290:            {
    #####:  291:              errno = EPIPE;  /* behave like write produced EPIPE */
    #####:  292:              if (fail_output (descriptors, files, first_out))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  293:                ok = false;
    #####:  294:              n_outputs--;
    #####:  295:              first_out = get_next_out (descriptors, nfiles, first_out);
call    0 never executed
    #####:  296:              continue;
        -:  297:            }
    #####:  298:          else if (err == IOPOLL_ERROR)
branch  0 never executed
branch  1 never executed
        -:  299:            {
    #####:  300:              error (0, errno, _("iopoll error"));
    #####:  301:              ok = false;
        -:  302:            }
        -:  303:        }
        -:  304:
        2:  305:      bytes_read = read (STDIN_FILENO, buffer, sizeof buffer);
call    0 returned 100%
       2*:  306:      if (bytes_read < 0 && errno == EINTR)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  307:        continue;
        2:  308:      if (bytes_read <= 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  309:        break;
        -:  310:
        -:  311:      /* Write to all NFILES + 1 descriptors.
        -:  312:         Standard output is the first one.  */
        2:  313:      for (i = 0; i <= nfiles; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  314:        if (descriptors[i]
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  315:            && ! fwrite_wait (buffer, bytes_read, descriptors[i]))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  316:          {
    #####:  317:            if (fail_output (descriptors, files, i))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  318:              ok = false;
    #####:  319:            n_outputs--;
    #####:  320:            if (i == first_out)
branch  0 never executed
branch  1 never executed
    #####:  321:              first_out = get_next_out (descriptors, nfiles, first_out);
call    0 never executed
        -:  322:          }
        -:  323:    }
        -:  324:
        1:  325:  if (bytes_read == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  326:    {
    #####:  327:      error (0, errno, _("read error"));
    #####:  328:      ok = false;
        -:  329:    }
        -:  330:
        -:  331:  /* Close the files, but not standard output.  */
       1*:  332:  for (i = 1; i <= nfiles; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  333:    if (descriptors[i] && ! fclose_wait (descriptors[i]))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  334:      {
    #####:  335:        error (0, errno, "%s", quotef (files[i]));
call    0 never executed
    #####:  336:        ok = false;
        -:  337:      }
        -:  338:
        1:  339:  free (descriptors);
        1:  340:  if (pipe_check)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  341:    free (out_pollable);
        -:  342:
        1:  343:  return ok;
        -:  344:}
