        -:    0:Source:src/paste.c
        -:    0:Graph:paste.gcno
        -:    0:Data:paste.gcda
        -:    0:Runs:3
        -:    1:/* paste - merge lines of files
        -:    2:   Copyright (C) 1997-2023 Free Software Foundation, Inc.
        -:    3:   Copyright (C) 1984 David M. Ihnat
        -:    4:
        -:    5:   This program is free software: you can redistribute it and/or modify
        -:    6:   it under the terms of the GNU General Public License as published by
        -:    7:   the Free Software Foundation, either version 3 of the License, or
        -:    8:   (at your option) any later version.
        -:    9:
        -:   10:   This program is distributed in the hope that it will be useful,
        -:   11:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13:   GNU General Public License for more details.
        -:   14:
        -:   15:   You should have received a copy of the GNU General Public License
        -:   16:   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
        -:   17:
        -:   18:/* Written by David Ihnat.  */
        -:   19:
        -:   20:/* The list of valid escape sequences has been expanded over the Unix
        -:   21:   version, to include \b, \f, \r, and \v.
        -:   22:
        -:   23:   POSIX changes, bug fixes, long-named options, and cleanup
        -:   24:   by David MacKenzie <djm@gnu.ai.mit.edu>.
        -:   25:
        -:   26:   Options:
        -:   27:   --serial
        -:   28:   -s				Paste one file at a time rather than
        -:   29:                                one line from each file.
        -:   30:   --delimiters=delim-list
        -:   31:   -d delim-list		Consecutively use the characters in
        -:   32:                                DELIM-LIST instead of tab to separate
        -:   33:                                merged lines.  When DELIM-LIST is exhausted,
        -:   34:                                start again at its beginning.
        -:   35:   A FILE of '-' means standard input.
        -:   36:   If no FILEs are given, standard input is used. */
        -:   37:
        -:   38:#include <config.h>
        -:   39:
        -:   40:#include <stdio.h>
        -:   41:#include <getopt.h>
        -:   42:#include <sys/types.h>
        -:   43:#include "system.h"
        -:   44:#include "fadvise.h"
        -:   45:
        -:   46:/* The official name of this program (e.g., no 'g' prefix).  */
        -:   47:#define PROGRAM_NAME "paste"
        -:   48:
        -:   49:#define AUTHORS \
        -:   50:  proper_name ("David M. Ihnat"), \
        -:   51:  proper_name ("David MacKenzie")
        -:   52:
        -:   53:/* Indicates that no delimiter should be added in the current position. */
        -:   54:#define EMPTY_DELIM '\0'
        -:   55:
        -:   56:/* If nonzero, we have read standard input at some point. */
        -:   57:static bool have_read_stdin;
        -:   58:
        -:   59:/* If nonzero, merge subsequent lines of each file rather than
        -:   60:   corresponding lines from each file in parallel. */
        -:   61:static bool serial_merge;
        -:   62:
        -:   63:/* The delimiters between lines of input files (used cyclically). */
        -:   64:static char *delims;
        -:   65:
        -:   66:/* A pointer to the character after the end of 'delims'. */
        -:   67:static char const *delim_end;
        -:   68:
        -:   69:static unsigned char line_delim = '\n';
        -:   70:
        -:   71:static struct option const longopts[] =
        -:   72:{
        -:   73:  {"serial", no_argument, nullptr, 's'},
        -:   74:  {"delimiters", required_argument, nullptr, 'd'},
        -:   75:  {"zero-terminated", no_argument, nullptr, 'z'},
        -:   76:  {GETOPT_HELP_OPTION_DECL},
        -:   77:  {GETOPT_VERSION_OPTION_DECL},
        -:   78:  {nullptr, 0, nullptr, 0}
        -:   79:};
        -:   80:
        -:   81:/* Set globals delims and delim_end.  Copy STRPTR to DELIMS, converting
        -:   82:   backslash representations of special characters in STRPTR to their actual
        -:   83:   values. The set of possible backslash characters has been expanded beyond
        -:   84:   that recognized by the Unix version.
        -:   85:   Return 0 upon success.
        -:   86:   If the string ends in an odd number of backslashes, ignore the
        -:   87:   final backslash and return nonzero.  */
        -:   88:
        -:   89:static int
function collapse_escapes called 2 returned 100% blocks executed 40%
        2:   90:collapse_escapes (char const *strptr)
        -:   91:{
        2:   92:  char *strout = xstrdup (strptr);
call    0 returned 100%
        2:   93:  bool backslash_at_end = false;
        -:   94:
        2:   95:  delims = strout;
        -:   96:
        4:   97:  while (*strptr)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   98:    {
        2:   99:      if (*strptr != '\\')	/* Is it an escape character? */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  100:        *strout++ = *strptr++;	/* No, just transfer it. */
        -:  101:      else
        -:  102:        {
    #####:  103:          switch (*++strptr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  104:            {
    #####:  105:            case '0':
    #####:  106:              *strout++ = EMPTY_DELIM;
    #####:  107:              break;
        -:  108:
    #####:  109:            case 'b':
    #####:  110:              *strout++ = '\b';
    #####:  111:              break;
        -:  112:
    #####:  113:            case 'f':
    #####:  114:              *strout++ = '\f';
    #####:  115:              break;
        -:  116:
    #####:  117:            case 'n':
    #####:  118:              *strout++ = '\n';
    #####:  119:              break;
        -:  120:
    #####:  121:            case 'r':
    #####:  122:              *strout++ = '\r';
    #####:  123:              break;
        -:  124:
    #####:  125:            case 't':
    #####:  126:              *strout++ = '\t';
    #####:  127:              break;
        -:  128:
    #####:  129:            case 'v':
    #####:  130:              *strout++ = '\v';
    #####:  131:              break;
        -:  132:
    #####:  133:            case '\\':
    #####:  134:              *strout++ = '\\';
    #####:  135:              break;
        -:  136:
    #####:  137:            case '\0':
    #####:  138:              backslash_at_end = true;
    #####:  139:              goto done;
        -:  140:
    #####:  141:            default:
    #####:  142:              *strout++ = *strptr;
    #####:  143:              break;
        -:  144:            }
    #####:  145:          strptr++;
        -:  146:        }
        -:  147:    }
        -:  148:
        2:  149: done:
        -:  150:
        2:  151:  delim_end = strout;
        2:  152:  return backslash_at_end ? 1 : 0;
        -:  153:}
        -:  154:
        -:  155:/* Output a single byte, reporting any write errors.  */
        -:  156:
        -:  157:static inline void
function xputchar called 9 returned 100% blocks executed 75%
        9:  158:xputchar (char c)
        -:  159:{
        9:  160:  if (putchar (c) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  161:    write_error ();
call    0 never executed
        9:  162:}
        -:  163:
        -:  164:/* Perform column paste on the NFILES files named in FNAMPTR.
        -:  165:   Return true if successful, false if one or more files could not be
        -:  166:   opened or read. */
        -:  167:
        -:  168:static bool
function paste_parallel called 2 returned 50% blocks executed 52%
        2:  169:paste_parallel (size_t nfiles, char **fnamptr)
        -:  170:{
        2:  171:  bool ok = true;
        -:  172:  /* If all files are just ready to be closed, or will be on this
        -:  173:     round, the string of delimiters must be preserved.
        -:  174:     delbuf[0] through delbuf[nfiles]
        -:  175:     store the delimiters for closed files. */
        2:  176:  char *delbuf = xmalloc (nfiles + 2);
call    0 returned 100%
        -:  177:
        -:  178:  /* Streams open to the files to process; null if the corresponding
        -:  179:     stream is closed.  */
        2:  180:  FILE **fileptr = xnmalloc (nfiles + 1, sizeof *fileptr);
call    0 returned 100%
        -:  181:
        -:  182:  /* Number of files still open to process.  */
        -:  183:  size_t files_open;
        -:  184:
        -:  185:  /* True if any fopen got fd == STDIN_FILENO.  */
        2:  186:  bool opened_stdin = false;
        -:  187:
        -:  188:  /* Attempt to open all files.  This could be expanded to an infinite
        -:  189:     number of files, but at the (considerable) expense of remembering
        -:  190:     each file and its current offset, then opening/reading/closing.  */
        -:  191:
        3:  192:  for (files_open = 0; files_open < nfiles; ++files_open)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  193:    {
        2:  194:      if (STREQ (fnamptr[files_open], "-"))
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  195:        {
        1:  196:          have_read_stdin = true;
        1:  197:          fileptr[files_open] = stdin;
        -:  198:        }
        -:  199:      else
        -:  200:        {
        1:  201:          fileptr[files_open] = fopen (fnamptr[files_open], "r");
call    0 returned 100%
        1:  202:          if (fileptr[files_open] == nullptr)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       1*:  203:            error (EXIT_FAILURE, errno, "%s", quotef (fnamptr[files_open]));
call    0 returned 100%
call    1 never executed
    #####:  204:          else if (fileno (fileptr[files_open]) == STDIN_FILENO)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  205:            opened_stdin = true;
    #####:  206:          fadvise (fileptr[files_open], FADVISE_SEQUENTIAL);
call    0 never executed
        -:  207:        }
        -:  208:    }
        -:  209:
       1*:  210:  if (opened_stdin && have_read_stdin)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  211:    error (EXIT_FAILURE, 0, _("standard input is closed"));
call    0 never executed
        -:  212:
        -:  213:  /* Read a line from each file and output it to stdout separated by a
        -:  214:     delimiter, until we go through the loop without successfully
        -:  215:     reading from any of the files. */
        -:  216:
        3:  217:  while (files_open)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  218:    {
        -:  219:      /* Set up for the next line. */
        2:  220:      bool somedone = false;
        2:  221:      char const *delimptr = delims;
        2:  222:      size_t delims_saved = 0;	/* Number of delims saved in 'delbuf'. */
        -:  223:
        4:  224:      for (size_t i = 0; i < nfiles && files_open; i++)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
        -:  225:        {
        -:  226:          int chr;			/* Input character. */
        -:  227:          int err;			/* Input errno value.  */
        2:  228:          bool sometodo = false;	/* Input chars to process.  */
        -:  229:
        2:  230:          if (fileptr[i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  231:            {
        2:  232:              chr = getc (fileptr[i]);
call    0 returned 100%
        2:  233:              err = errno;
        2:  234:              if (chr != EOF && delims_saved)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  235:                {
    #####:  236:                  if (fwrite (delbuf, 1, delims_saved, stdout) != delims_saved)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  237:                    write_error ();
call    0 never executed
    #####:  238:                  delims_saved = 0;
        -:  239:                }
        -:  240:
       10:  241:              while (chr != EOF)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  242:                {
        8:  243:                  sometodo = true;
        8:  244:                  if (chr == line_delim)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  245:                    break;
        8:  246:                  xputchar (chr);
call    0 returned 100%
        8:  247:                  chr = getc (fileptr[i]);
call    0 returned 100%
        8:  248:                  err = errno;
        -:  249:                }
        -:  250:            }
        -:  251:
        2:  252:          if (! sometodo)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  253:            {
        -:  254:              /* EOF, read error, or closed file.
        -:  255:                 If an EOF or error, close the file.  */
        1:  256:              if (fileptr[i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  257:                {
        1:  258:                  if (!ferror (fileptr[i]))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  259:                    err = 0;
        1:  260:                  if (fileptr[i] == stdin)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  261:                    clearerr (fileptr[i]); /* Also clear EOF. */
call    0 returned 100%
    #####:  262:                  else if (fclose (fileptr[i]) == EOF && !err)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  263:                    err = errno;
        1:  264:                  if (err)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  265:                    {
    #####:  266:                      error (0, err, "%s", quotef (fnamptr[i]));
call    0 never executed
    #####:  267:                      ok = false;
        -:  268:                    }
        -:  269:
        1:  270:                  fileptr[i] = nullptr;
        1:  271:                  files_open--;
        -:  272:                }
        -:  273:
        1:  274:              if (i + 1 == nfiles)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  275:                {
        -:  276:                  /* End of this output line.
        -:  277:                     Is this the end of the whole thing? */
        1:  278:                  if (somedone)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  279:                    {
        -:  280:                      /* No.  Some files were not closed for this line. */
    #####:  281:                      if (delims_saved)
branch  0 never executed
branch  1 never executed
        -:  282:                        {
    #####:  283:                          if (fwrite (delbuf, 1, delims_saved, stdout)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  284:                              != delims_saved)
    #####:  285:                            write_error ();
call    0 never executed
    #####:  286:                          delims_saved = 0;
        -:  287:                        }
    #####:  288:                      xputchar (line_delim);
call    0 never executed
        -:  289:                    }
        1:  290:                  continue;	/* Next read of files, or exit. */
        -:  291:                }
        -:  292:              else
        -:  293:                {
        -:  294:                  /* Closed file; add delimiter to 'delbuf'. */
    #####:  295:                  if (*delimptr != EMPTY_DELIM)
branch  0 never executed
branch  1 never executed
    #####:  296:                    delbuf[delims_saved++] = *delimptr;
    #####:  297:                  if (++delimptr == delim_end)
branch  0 never executed
branch  1 never executed
    #####:  298:                    delimptr = delims;
        -:  299:                }
        -:  300:            }
        -:  301:          else
        -:  302:            {
        -:  303:              /* Some data read. */
        1:  304:              somedone = true;
        -:  305:
        -:  306:              /* Except for last file, replace last newline with delim. */
        1:  307:              if (i + 1 != nfiles)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  308:                {
    #####:  309:                  if (chr != line_delim && chr != EOF)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  310:                    xputchar (chr);
call    0 never executed
    #####:  311:                  if (*delimptr != EMPTY_DELIM)
branch  0 never executed
branch  1 never executed
    #####:  312:                    xputchar (*delimptr);
call    0 never executed
    #####:  313:                  if (++delimptr == delim_end)
branch  0 never executed
branch  1 never executed
    #####:  314:                    delimptr = delims;
        -:  315:                }
        -:  316:              else
        -:  317:                {
        -:  318:                  /* If the last line of the last file lacks a newline,
        -:  319:                     print one anyhow.  POSIX requires this.  */
       1*:  320:                  char c = (chr == EOF ? line_delim : chr);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  321:                  xputchar (c);
call    0 returned 100%
        -:  322:                }
        -:  323:            }
        -:  324:        }
        -:  325:    }
        1:  326:  free (fileptr);
        1:  327:  free (delbuf);
        1:  328:  return ok;
        -:  329:}
        -:  330:
        -:  331:/* Perform serial paste on the NFILES files named in FNAMPTR.
        -:  332:   Return true if no errors, false if one or more files could not be
        -:  333:   opened or read. */
        -:  334:
        -:  335:static bool
function paste_serial called 0 returned 0% blocks executed 0%
    #####:  336:paste_serial (size_t nfiles, char **fnamptr)
        -:  337:{
    #####:  338:  bool ok = true;	/* false if open or read errors occur. */
        -:  339:  int charnew, charold; /* Current and previous char read. */
        -:  340:  char const *delimptr;	/* Current delimiter char. */
        -:  341:  FILE *fileptr;	/* Open for reading current file. */
        -:  342:
    #####:  343:  for (; nfiles; nfiles--, fnamptr++)
branch  0 never executed
branch  1 never executed
        -:  344:    {
        -:  345:      int saved_errno;
    #####:  346:      bool is_stdin = STREQ (*fnamptr, "-");
    #####:  347:      if (is_stdin)
branch  0 never executed
branch  1 never executed
        -:  348:        {
    #####:  349:          have_read_stdin = true;
    #####:  350:          fileptr = stdin;
        -:  351:        }
        -:  352:      else
        -:  353:        {
    #####:  354:          fileptr = fopen (*fnamptr, "r");
call    0 never executed
    #####:  355:          if (fileptr == nullptr)
branch  0 never executed
branch  1 never executed
        -:  356:            {
    #####:  357:              error (0, errno, "%s", quotef (*fnamptr));
call    0 never executed
    #####:  358:              ok = false;
    #####:  359:              continue;
        -:  360:            }
    #####:  361:          fadvise (fileptr, FADVISE_SEQUENTIAL);
call    0 never executed
        -:  362:        }
        -:  363:
    #####:  364:      delimptr = delims;	/* Set up for delimiter string. */
        -:  365:
    #####:  366:      charold = getc (fileptr);
call    0 never executed
    #####:  367:      saved_errno = errno;
    #####:  368:      if (charold != EOF)
branch  0 never executed
branch  1 never executed
        -:  369:        {
        -:  370:          /* 'charold' is set up.  Hit it!
        -:  371:             Keep reading characters, stashing them in 'charnew';
        -:  372:             output 'charold', converting to the appropriate delimiter
        -:  373:             character if needed.  After the EOF, output 'charold'
        -:  374:             if it's a newline; otherwise, output it and then a newline. */
        -:  375:
    #####:  376:          while ((charnew = getc (fileptr)) != EOF)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  377:            {
        -:  378:              /* Process the old character. */
    #####:  379:              if (charold == line_delim)
branch  0 never executed
branch  1 never executed
        -:  380:                {
    #####:  381:                  if (*delimptr != EMPTY_DELIM)
branch  0 never executed
branch  1 never executed
    #####:  382:                    xputchar (*delimptr);
call    0 never executed
        -:  383:
    #####:  384:                  if (++delimptr == delim_end)
branch  0 never executed
branch  1 never executed
    #####:  385:                    delimptr = delims;
        -:  386:                }
        -:  387:              else
    #####:  388:                xputchar (charold);
call    0 never executed
        -:  389:
    #####:  390:              charold = charnew;
        -:  391:            }
    #####:  392:          saved_errno = errno;
        -:  393:
        -:  394:          /* Hit EOF.  Process that last character. */
    #####:  395:          xputchar (charold);
call    0 never executed
        -:  396:        }
        -:  397:
    #####:  398:      if (charold != line_delim)
branch  0 never executed
branch  1 never executed
    #####:  399:        xputchar (line_delim);
call    0 never executed
        -:  400:
    #####:  401:      if (!ferror (fileptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  402:        saved_errno = 0;
    #####:  403:      if (is_stdin)
branch  0 never executed
branch  1 never executed
    #####:  404:        clearerr (fileptr);	/* Also clear EOF. */
call    0 never executed
    #####:  405:      else if (fclose (fileptr) != 0 && !saved_errno)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  406:        saved_errno = errno;
    #####:  407:      if (saved_errno)
branch  0 never executed
branch  1 never executed
        -:  408:        {
    #####:  409:          error (0, saved_errno, "%s", quotef (*fnamptr));
call    0 never executed
    #####:  410:          ok = false;
        -:  411:        }
        -:  412:    }
    #####:  413:  return ok;
        -:  414:}
        -:  415:
        -:  416:void
function usage called 1 returned 0% blocks executed 25%
        1:  417:usage (int status)
        -:  418:{
        1:  419:  if (status != EXIT_SUCCESS)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  420:    emit_try_help ();
call    0 returned 100%
        -:  421:  else
        -:  422:    {
    #####:  423:      printf (_("\
call    0 never executed
        -:  424:Usage: %s [OPTION]... [FILE]...\n\
        -:  425:"),
        -:  426:              program_name);
    #####:  427:      fputs (_("\
call    0 never executed
        -:  428:Write lines consisting of the sequentially corresponding lines from\n\
        -:  429:each FILE, separated by TABs, to standard output.\n\
        -:  430:"), stdout);
        -:  431:
    #####:  432:      emit_stdin_note ();
call    0 never executed
    #####:  433:      emit_mandatory_arg_note ();
call    0 never executed
        -:  434:
    #####:  435:      fputs (_("\
call    0 never executed
        -:  436:  -d, --delimiters=LIST   reuse characters from LIST instead of TABs\n\
        -:  437:  -s, --serial            paste one file at a time instead of in parallel\n\
        -:  438:"), stdout);
    #####:  439:      fputs (_("\
call    0 never executed
        -:  440:  -z, --zero-terminated    line delimiter is NUL, not newline\n\
        -:  441:"), stdout);
    #####:  442:      fputs (HELP_OPTION_DESCRIPTION, stdout);
call    0 never executed
    #####:  443:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
call    0 never executed
        -:  444:      /* FIXME: add a couple of examples.  */
    #####:  445:      emit_ancillary_info (PROGRAM_NAME);
call    0 never executed
        -:  446:    }
        1:  447:  exit (status);
        -:  448:}
        -:  449:
        -:  450:int
function main called 3 returned 33% blocks executed 50%
        3:  451:main (int argc, char **argv)
        -:  452:{
        -:  453:  int optc;
        3:  454:  char const *delim_arg = "\t";
        -:  455:
        -:  456:  initialize_main (&argc, &argv);
        3:  457:  set_program_name (argv[0]);
call    0 returned 100%
        3:  458:  setlocale (LC_ALL, "");
call    0 returned 100%
        -:  459:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  460:  textdomain (PACKAGE);
        -:  461:
        3:  462:  atexit (close_stdout);
call    0 returned 100%
        -:  463:
        3:  464:  have_read_stdin = false;
        3:  465:  serial_merge = false;
        -:  466:
        3:  467:  while ((optc = getopt_long (argc, argv, "d:sz", longopts, nullptr)) != -1)
call    0 returned 100%
branch  1 taken 33%
branch  2 taken 67% (fallthrough)
        -:  468:    {
        1:  469:      switch (optc)
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        -:  470:        {
    #####:  471:        case 'd':
        -:  472:          /* Delimiter character(s). */
    #####:  473:          delim_arg = (optarg[0] == '\0' ? "\\0" : optarg);
branch  0 never executed
branch  1 never executed
    #####:  474:          break;
        -:  475:
    #####:  476:        case 's':
    #####:  477:          serial_merge = true;
    #####:  478:          break;
        -:  479:
    #####:  480:        case 'z':
    #####:  481:          line_delim = '\0';
    #####:  482:          break;
        -:  483:
    #####:  484:        case_GETOPT_HELP_CHAR;
call    0 never executed
        -:  485:
    #####:  486:        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  487:
        1:  488:        default:
        1:  489:          usage (EXIT_FAILURE);
call    0 returned 0%
        -:  490:        }
        -:  491:    }
        -:  492:
        2:  493:  int nfiles = argc - optind;
        2:  494:  if (nfiles == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  495:    {
        1:  496:      argv[optind] = bad_cast ("-");
call    0 returned 100%
        1:  497:      nfiles++;
        -:  498:    }
        -:  499:
        2:  500:  if (collapse_escapes (delim_arg))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  501:    {
        -:  502:      /* Don't use the quote() quoting style, because that would double the
        -:  503:         number of displayed backslashes, making the diagnostic look bogus.  */
    #####:  504:      error (EXIT_FAILURE, 0,
call    0 never executed
call    1 never executed
        -:  505:             _("delimiter list ends with an unescaped backslash: %s"),
        -:  506:             quotearg_n_style_colon (0, c_maybe_quoting_style, delim_arg));
        -:  507:    }
        -:  508:
       2*:  509:  bool ok = ((serial_merge ? paste_serial : paste_parallel)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        2:  510:             (nfiles, &argv[optind]));
call    0 returned 50%
        -:  511:
        1:  512:  free (delims);
        -:  513:
        1:  514:  if (have_read_stdin && fclose (stdin) == EOF)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  515:    error (EXIT_FAILURE, errno, "-");
call    0 never executed
        1:  516:  return ok ? EXIT_SUCCESS : EXIT_FAILURE;
        -:  517:}
