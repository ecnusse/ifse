{"$message_type":"diagnostic","message":"unused import: `BorrowMut`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/smt2fuzz/smt2fuzz.rs","byte_start":26,"byte_end":35,"line_start":1,"line_end":1,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"use std::borrow::{Borrow, BorrowMut};","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `BorrowMut`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smt2fuzz/smt2fuzz.rs:1:27\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::borrow::{Borrow, BorrowMut};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::borrow::Borrow`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/mir/ir.rs","byte_start":4,"byte_end":23,"line_start":1,"line_end":1,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"use std::borrow::Borrow;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::borrow::Borrow`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::borrow::Borrow;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Borrow`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/smt2fuzz/smt2fuzz.rs","byte_start":18,"byte_end":24,"line_start":1,"line_end":1,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"use std::borrow::{Borrow, BorrowMut};","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Borrow`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smt2fuzz/smt2fuzz.rs:1:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::borrow::{Borrow, BorrowMut};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `Attribute` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/api.rs","byte_start":3760,"byte_end":3769,"line_start":118,"line_end":118,"column_start":6,"column_end":15,"is_primary":false,"text":[{"text":"enum HIRObject {","highlight_start":6,"highlight_end":15}],"label":"variant in this enum","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api.rs","byte_start":3968,"byte_end":3977,"line_start":127,"line_end":127,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    Attribute(Attribute),","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`HIRObject` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `Attribute` is never constructed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api.rs:127:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0menum HIRObject {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvariant in this enum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Attribute(Attribute),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `HIRObject` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"associated function `new` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/fuzzend/response.rs","byte_start":529,"byte_end":539,"line_start":23,"line_end":23,"column_start":1,"column_end":11,"is_primary":false,"text":[{"text":"impl Model {","highlight_start":1,"highlight_end":11}],"label":"associated function in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/fuzzend/response.rs","byte_start":560,"byte_end":563,"line_start":24,"line_end":24,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"    pub(super) fn new() -> Self {","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated function `new` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/fuzzend/response.rs:24:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Model {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated function in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(super) fn new() -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `0` and `1` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":962,"byte_end":975,"line_start":39,"line_end":39,"column_start":12,"column_end":25,"is_primary":false,"text":[{"text":"pub struct ValuationPair(Term, Term);","highlight_start":12,"highlight_end":25}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":976,"byte_end":980,"line_start":39,"line_end":39,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub struct ValuationPair(Term, Term);","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":982,"byte_end":986,"line_start":39,"line_end":39,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"pub struct ValuationPair(Term, Term);","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ValuationPair` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":976,"byte_end":980,"line_start":39,"line_end":39,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub struct ValuationPair(Term, Term);","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src/hir/response.rs","byte_start":982,"byte_end":986,"line_start":39,"line_end":39,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"pub struct ValuationPair(Term, Term);","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `0` and `1` are never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:39:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ValuationPair(Term, Term);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `ValuationPair` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct ValuationPair(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `0` and `1` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1025,"byte_end":1039,"line_start":42,"line_end":42,"column_start":12,"column_end":26,"is_primary":false,"text":[{"text":"pub struct TValuationPair(Symbol, Term);","highlight_start":12,"highlight_end":26}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1040,"byte_end":1046,"line_start":42,"line_end":42,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"pub struct TValuationPair(Symbol, Term);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1048,"byte_end":1052,"line_start":42,"line_end":42,"column_start":35,"column_end":39,"is_primary":true,"text":[{"text":"pub struct TValuationPair(Symbol, Term);","highlight_start":35,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`TValuationPair` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1040,"byte_end":1046,"line_start":42,"line_end":42,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"pub struct TValuationPair(Symbol, Term);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src/hir/response.rs","byte_start":1048,"byte_end":1052,"line_start":42,"line_end":42,"column_start":35,"column_end":39,"is_primary":true,"text":[{"text":"pub struct TValuationPair(Symbol, Term);","highlight_start":35,"highlight_end":39}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `0` and `1` are never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:42:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct TValuationPair(Symbol, Term);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `TValuationPair` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct TValuationPair(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1179,"byte_end":1191,"line_start":52,"line_end":52,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct EchoResponse(String);","highlight_start":12,"highlight_end":24}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1192,"byte_end":1198,"line_start":52,"line_end":52,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"pub struct EchoResponse(String);","highlight_start":25,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`EchoResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1192,"byte_end":1198,"line_start":52,"line_end":52,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"pub struct EchoResponse(String);","highlight_start":25,"highlight_end":31}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:52:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct EchoResponse(String);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `EchoResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct EchoResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1237,"byte_end":1258,"line_start":55,"line_end":55,"column_start":12,"column_end":33,"is_primary":false,"text":[{"text":"pub struct GetAssertionsResponse(Vec<Term>);","highlight_start":12,"highlight_end":33}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1259,"byte_end":1268,"line_start":55,"line_end":55,"column_start":34,"column_end":43,"is_primary":true,"text":[{"text":"pub struct GetAssertionsResponse(Vec<Term>);","highlight_start":34,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetAssertionsResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1259,"byte_end":1268,"line_start":55,"line_end":55,"column_start":34,"column_end":43,"is_primary":true,"text":[{"text":"pub struct GetAssertionsResponse(Vec<Term>);","highlight_start":34,"highlight_end":43}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:55:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetAssertionsResponse(Vec<Term>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetAssertionsResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetAssertionsResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1307,"byte_end":1328,"line_start":58,"line_end":58,"column_start":12,"column_end":33,"is_primary":false,"text":[{"text":"pub struct GetAssignmentResponse(Vec<ValuationPair>);","highlight_start":12,"highlight_end":33}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1329,"byte_end":1347,"line_start":58,"line_end":58,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"pub struct GetAssignmentResponse(Vec<ValuationPair>);","highlight_start":34,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetAssignmentResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1329,"byte_end":1347,"line_start":58,"line_end":58,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"pub struct GetAssignmentResponse(Vec<ValuationPair>);","highlight_start":34,"highlight_end":52}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:58:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetAssignmentResponse(Vec<ValuationPair>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetAssignmentResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetAssignmentResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1386,"byte_end":1401,"line_start":61,"line_end":61,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct GetInfoResponse(InfoResponse);","highlight_start":12,"highlight_end":27}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1402,"byte_end":1414,"line_start":61,"line_end":61,"column_start":28,"column_end":40,"is_primary":true,"text":[{"text":"pub struct GetInfoResponse(InfoResponse);","highlight_start":28,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetInfoResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1402,"byte_end":1414,"line_start":61,"line_end":61,"column_start":28,"column_end":40,"is_primary":true,"text":[{"text":"pub struct GetInfoResponse(InfoResponse);","highlight_start":28,"highlight_end":40}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:61:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetInfoResponse(InfoResponse);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetInfoResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetInfoResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1453,"byte_end":1469,"line_start":64,"line_end":64,"column_start":12,"column_end":28,"is_primary":false,"text":[{"text":"pub struct GetModelResponse(ModelResponse);","highlight_start":12,"highlight_end":28}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1470,"byte_end":1483,"line_start":64,"line_end":64,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"pub struct GetModelResponse(ModelResponse);","highlight_start":29,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetModelResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1470,"byte_end":1483,"line_start":64,"line_end":64,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"pub struct GetModelResponse(ModelResponse);","highlight_start":29,"highlight_end":42}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:64:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetModelResponse(ModelResponse);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetModelResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetModelResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1522,"byte_end":1539,"line_start":67,"line_end":67,"column_start":12,"column_end":29,"is_primary":false,"text":[{"text":"pub struct GetOptionResponse(Attribute);","highlight_start":12,"highlight_end":29}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1540,"byte_end":1549,"line_start":67,"line_end":67,"column_start":30,"column_end":39,"is_primary":true,"text":[{"text":"pub struct GetOptionResponse(Attribute);","highlight_start":30,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetOptionResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1540,"byte_end":1549,"line_start":67,"line_end":67,"column_start":30,"column_end":39,"is_primary":true,"text":[{"text":"pub struct GetOptionResponse(Attribute);","highlight_start":30,"highlight_end":39}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:67:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetOptionResponse(Attribute);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetOptionResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetOptionResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1588,"byte_end":1604,"line_start":70,"line_end":70,"column_start":12,"column_end":28,"is_primary":false,"text":[{"text":"pub struct GetProofResponse(SExpr);","highlight_start":12,"highlight_end":28}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1605,"byte_end":1610,"line_start":70,"line_end":70,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"pub struct GetProofResponse(SExpr);","highlight_start":29,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetProofResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1605,"byte_end":1610,"line_start":70,"line_end":70,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"pub struct GetProofResponse(SExpr);","highlight_start":29,"highlight_end":34}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:70:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetProofResponse(SExpr);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetProofResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetProofResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1649,"byte_end":1671,"line_start":73,"line_end":73,"column_start":12,"column_end":34,"is_primary":false,"text":[{"text":"pub struct GetUnsatAssumpResponse(Vec<Symbol>);","highlight_start":12,"highlight_end":34}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1672,"byte_end":1683,"line_start":73,"line_end":73,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"pub struct GetUnsatAssumpResponse(Vec<Symbol>);","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetUnsatAssumpResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1672,"byte_end":1683,"line_start":73,"line_end":73,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"pub struct GetUnsatAssumpResponse(Vec<Symbol>);","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:73:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetUnsatAssumpResponse(Vec<Symbol>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetUnsatAssumpResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetUnsatAssumpResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1722,"byte_end":1742,"line_start":76,"line_end":76,"column_start":12,"column_end":32,"is_primary":false,"text":[{"text":"pub struct GetUnsatCoreResponse(Vec<Symbol>);","highlight_start":12,"highlight_end":32}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1743,"byte_end":1754,"line_start":76,"line_end":76,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"pub struct GetUnsatCoreResponse(Vec<Symbol>);","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetUnsatCoreResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1743,"byte_end":1754,"line_start":76,"line_end":76,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"pub struct GetUnsatCoreResponse(Vec<Symbol>);","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:76:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetUnsatCoreResponse(Vec<Symbol>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetUnsatCoreResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetUnsatCoreResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hir/response.rs","byte_start":1793,"byte_end":1809,"line_start":79,"line_end":79,"column_start":12,"column_end":28,"is_primary":false,"text":[{"text":"pub struct GetValueResponse(Vec<ValuationPair>);","highlight_start":12,"highlight_end":28}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hir/response.rs","byte_start":1810,"byte_end":1828,"line_start":79,"line_end":79,"column_start":29,"column_end":47,"is_primary":true,"text":[{"text":"pub struct GetValueResponse(Vec<ValuationPair>);","highlight_start":29,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`GetValueResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"src/hir/response.rs","byte_start":1810,"byte_end":1828,"line_start":79,"line_end":79,"column_start":29,"column_end":47,"is_primary":true,"text":[{"text":"pub struct GetValueResponse(Vec<ValuationPair>);","highlight_start":29,"highlight_end":47}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hir/response.rs:79:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GetValueResponse(Vec<ValuationPair>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `GetValueResponse` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct GetValueResponse(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `unset_virtual` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/mir/ir.rs","byte_start":7426,"byte_end":7447,"line_start":244,"line_end":244,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"impl DeclaredConstant {","highlight_start":1,"highlight_end":22}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/mir/ir.rs","byte_start":8024,"byte_end":8037,"line_start":267,"line_end":267,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"    pub(crate) fn unset_virtual(&self, from: usize, to: usize) {","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `unset_virtual` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:267:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl DeclaredConstant {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) fn unset_virtual(&self, from: usize, to: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `remove_depend_on` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/mir/ir.rs","byte_start":33781,"byte_end":33798,"line_start":1101,"line_end":1101,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl MutableIRRef {","highlight_start":1,"highlight_end":18}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/mir/ir.rs","byte_start":35351,"byte_end":35367,"line_start":1146,"line_end":1146,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn remove_depend_on(&self, to_remove: &MutableIRWeak) {","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `remove_depend_on` is never used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:1146:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl MutableIRRef {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove_depend_on(&self, to_remove: &MutableIRWeak) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"calls to `std::mem::forget` with a value that implements `Copy` does nothing","code":{"code":"forgetting_copy_types","explanation":null},"level":"warning","spans":[{"file_name":"src/api.rs","byte_start":36941,"byte_end":36945,"line_start":1069,"line_end":1069,"column_start":22,"column_end":26,"is_primary":false,"text":[{"text":"    std::mem::forget(node);","highlight_start":22,"highlight_end":26}],"label":"argument has type `*const KASTNode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api.rs","byte_start":36924,"byte_end":36946,"line_start":1069,"line_end":1069,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    std::mem::forget(node);","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `let _ = ...` to ignore the expression or result","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(forgetting_copy_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: calls to `std::mem::forget` with a value that implements `Copy` does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api.rs:1069:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    std::mem::forget(node);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument has type `*const KASTNode`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: use `let _ = ...` to ignore the expression or result\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(forgetting_copy_types)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22493,"byte_end":22539,"line_start":632,"line_end":632,"column_start":9,"column_end":55,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"match_template!","def_site_span":{"file_name":"/home/user/ifse/krpk/match-template/src/lib.rs","byte_start":2187,"byte_end":2267,"line_start":80,"line_end":80,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn match_template(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write!","def_site_span":{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22430,"byte_end":22448,"line_start":630,"line_end":630,"column_start":1,"column_end":19,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match_template! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SIMPLE = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                And => \"and\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Or => \"or\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `write` which comes from the expansion of the macro `match_template` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22493,"byte_end":22539,"line_start":632,"line_end":632,"column_start":9,"column_end":55,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"match_template!","def_site_span":{"file_name":"/home/user/ifse/krpk/match-template/src/lib.rs","byte_start":2187,"byte_end":2267,"line_start":80,"line_end":80,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn match_template(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write!","def_site_span":{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22430,"byte_end":22448,"line_start":630,"line_end":630,"column_start":1,"column_end":19,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match_template! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SIMPLE = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                And => \"and\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Or => \"or\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `write` which comes from the expansion of the macro `match_template` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22493,"byte_end":22539,"line_start":632,"line_end":632,"column_start":9,"column_end":55,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"match_template!","def_site_span":{"file_name":"/home/user/ifse/krpk/match-template/src/lib.rs","byte_start":2187,"byte_end":2267,"line_start":80,"line_end":80,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn match_template(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write!","def_site_span":{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22430,"byte_end":22448,"line_start":630,"line_end":630,"column_start":1,"column_end":19,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match_template! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SIMPLE = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                And => \"and\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Or => \"or\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `write` which comes from the expansion of the macro `match_template` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22493,"byte_end":22539,"line_start":632,"line_end":632,"column_start":9,"column_end":55,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"match_template!","def_site_span":{"file_name":"/home/user/ifse/krpk/match-template/src/lib.rs","byte_start":2187,"byte_end":2267,"line_start":80,"line_end":80,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn match_template(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write!","def_site_span":{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22430,"byte_end":22448,"line_start":630,"line_end":630,"column_start":1,"column_end":19,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match_template! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SIMPLE = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                And => \"and\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Or => \"or\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `write` which comes from the expansion of the macro `match_template` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22493,"byte_end":22539,"line_start":632,"line_end":632,"column_start":9,"column_end":55,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"match_template!","def_site_span":{"file_name":"/home/user/ifse/krpk/match-template/src/lib.rs","byte_start":2187,"byte_end":2267,"line_start":80,"line_end":80,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn match_template(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write!","def_site_span":{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22430,"byte_end":22448,"line_start":630,"line_end":630,"column_start":1,"column_end":19,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match_template! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SIMPLE = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                And => \"and\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Or => \"or\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `write` which comes from the expansion of the macro `match_template` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22493,"byte_end":22539,"line_start":632,"line_end":632,"column_start":9,"column_end":55,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"match_template!","def_site_span":{"file_name":"/home/user/ifse/krpk/match-template/src/lib.rs","byte_start":2187,"byte_end":2267,"line_start":80,"line_end":80,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn match_template(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write!","def_site_span":{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22430,"byte_end":22448,"line_start":630,"line_end":630,"column_start":1,"column_end":19,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match_template! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SIMPLE = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                And => \"and\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Or => \"or\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `write` which comes from the expansion of the macro `match_template` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22493,"byte_end":22539,"line_start":632,"line_end":632,"column_start":9,"column_end":55,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mir/ir.rs","byte_start":22015,"byte_end":26493,"line_start":679,"line_end":791,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match_template! {","highlight_start":9,"highlight_end":26},{"text":"            SIMPLE = [","highlight_start":1,"highlight_end":23},{"text":"                And => \"and\",","highlight_start":1,"highlight_end":30},{"text":"                Or => \"or\",","highlight_start":1,"highlight_end":28},{"text":"                Eq => \"eq\",","highlight_start":1,"highlight_end":28},{"text":"                Ne => \"ne\",","highlight_start":1,"highlight_end":28},{"text":"                Ite => \"ite\",","highlight_start":1,"highlight_end":30},{"text":"                Concat => \"concat\",","highlight_start":1,"highlight_end":36},{"text":"                BVNot => \"bvnot\",","highlight_start":1,"highlight_end":34},{"text":"                BVAnd => \"bvand\",","highlight_start":1,"highlight_end":34},{"text":"                BVOr => \"bvor\",","highlight_start":1,"highlight_end":32},{"text":"                BVNeg => \"bvneg\",","highlight_start":1,"highlight_end":34},{"text":"                BVAdd => \"bvadd\",","highlight_start":1,"highlight_end":34},{"text":"                BVMul => \"bvmul\",","highlight_start":1,"highlight_end":34},{"text":"                BVUDiv => \"bvudiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVURem => \"bvurem\",","highlight_start":1,"highlight_end":36},{"text":"                BVShL => \"bvshl\",","highlight_start":1,"highlight_end":34},{"text":"                BVLShR => \"bvlshr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULt => \"bvult\",","highlight_start":1,"highlight_end":34},{"text":"                BVComp => \"bvcomp\",","highlight_start":1,"highlight_end":36},{"text":"                BVSub => \"bvsub\",","highlight_start":1,"highlight_end":34},{"text":"                BVSDiv => \"bvsdiv\",","highlight_start":1,"highlight_end":36},{"text":"                BVSRem => \"bvsrem\",","highlight_start":1,"highlight_end":36},{"text":"                BVSMod => \"bvsmod\",","highlight_start":1,"highlight_end":36},{"text":"                BVAShR => \"bvashr\",","highlight_start":1,"highlight_end":36},{"text":"                BVULe => \"bvule\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGt => \"bvugt\",","highlight_start":1,"highlight_end":34},{"text":"                BVUGe => \"bvuge\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLt => \"bvslt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSLe => \"bvsle\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGt => \"bvsgt\",","highlight_start":1,"highlight_end":34},{"text":"                BVSGe => \"bvsge\",","highlight_start":1,"highlight_end":34},{"text":"                BV2Bool => \"bv2bool\",","highlight_start":1,"highlight_end":38},{"text":"                Bool2BV => \"bool2bv\",","highlight_start":1,"highlight_end":38},{"text":"                Select => \"select\",","highlight_start":1,"highlight_end":36},{"text":"                Store => \"store\",","highlight_start":1,"highlight_end":34},{"text":"                Not => \"not\"","highlight_start":1,"highlight_end":29},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            UNARY_INDEX = [","highlight_start":1,"highlight_end":28},{"text":"                Repeat => \"repeat\",","highlight_start":1,"highlight_end":36},{"text":"                ZeroExtend => \"zero_extend\",","highlight_start":1,"highlight_end":45},{"text":"                SignExtend => \"sign_extend\",","highlight_start":1,"highlight_end":45},{"text":"                RotateLeft => \"rotate_left\",","highlight_start":1,"highlight_end":45},{"text":"                RotateRight => \"rotate_right\"","highlight_start":1,"highlight_end":46},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            BINARY_INDEX = [","highlight_start":1,"highlight_end":29},{"text":"                Extract => \"extract\",","highlight_start":1,"highlight_end":38},{"text":"                ConstBVArray => \"constbva\"","highlight_start":1,"highlight_end":43},{"text":"            ],","highlight_start":1,"highlight_end":15},{"text":"            match &self.kind {","highlight_start":1,"highlight_end":31},{"text":"                SIMPLE => {","highlight_start":1,"highlight_end":28},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), SIMPLE)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                UNARY_INDEX(index) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = {} {}\", self.value_ref.as_ref().unwrap(), UNARY_INDEX, *index);","highlight_start":1,"highlight_end":100},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                BINARY_INDEX(index1, index2) => {","highlight_start":1,"highlight_end":50},{"text":"                    write!(f, \"{} = {} {} {}\", self.value_ref.as_ref().unwrap(), BINARY_INDEX, *index1, *index2);","highlight_start":1,"highlight_end":114},{"text":"                    for operand in &self.operands {","highlight_start":1,"highlight_end":52},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Check => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"cktrue {}\", self.operands[0])","highlight_start":1,"highlight_end":61},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Memset(addr, bytes) => if let Some(bytes) = bytes {","highlight_start":1,"highlight_end":68},{"text":"                    write!(f, \"memset {} \\\"{}\\\"\", addr, bytes)","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    write!(f, \"memset {} {}\", addr, self.operands[0])","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                WriteBack(declared) => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"writeback {} {}\", declared.name, self.operands[0])","highlight_start":1,"highlight_end":82},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                ConstantRef(declared) => {","highlight_start":1,"highlight_end":43},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), declared.name)","highlight_start":1,"highlight_end":90},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Literal { literal } => {","highlight_start":1,"highlight_end":41},{"text":"                    write!(f, \"{} = \", self.value_ref.as_ref().unwrap())?;","highlight_start":1,"highlight_end":75},{"text":"                    match literal {","highlight_start":1,"highlight_end":36},{"text":"                        LiteralValue::BitVecValue(size, value) => {","highlight_start":1,"highlight_end":68},{"text":"                            write!(f, \"bvx{}#\", size)?;","highlight_start":1,"highlight_end":56},{"text":"                            for byte in value.iter().rev() {","highlight_start":1,"highlight_end":61},{"text":"                                write!(f, \"{:02x}\", byte)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BitVecArrayValue(_domain_width, _range_width, _value) => {","highlight_start":1,"highlight_end":97},{"text":"                            todo!()","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        LiteralValue::BoolValue(value) => write!(f, \"{}\", value),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                CallCBFunction(cb) => {","highlight_start":1,"highlight_end":40},{"text":"                    write!(f, \"{} = ({}\", self.value_ref.as_ref().unwrap(), cb.id)?;","highlight_start":1,"highlight_end":85},{"text":"                    for operand in self.operands.iter() {","highlight_start":1,"highlight_end":58},{"text":"                        write!(f, \" {}\", operand)?;","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    write!(f, \")\")","highlight_start":1,"highlight_end":35},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Alias => {","highlight_start":1,"highlight_end":27},{"text":"                    write!(f, \"{} = {}\", self.value_ref.as_ref().unwrap(), self.operands[0])","highlight_start":1,"highlight_end":93},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"match_template!","def_site_span":{"file_name":"/home/user/ifse/krpk/match-template/src/lib.rs","byte_start":2187,"byte_end":2267,"line_start":80,"line_end":80,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn match_template(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write!","def_site_span":{"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","byte_start":22430,"byte_end":22448,"line_start":630,"line_end":630,"column_start":1,"column_end":19,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mir/ir.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match_template! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            SIMPLE = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                And => \"and\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Or => \"or\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `write` which comes from the expansion of the macro `match_template` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `byteLiteral` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/smt2fuzz/smt2fuzz.rs","byte_start":60578,"byte_end":60589,"line_start":1204,"line_end":1204,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"                    Either::Right(byteLiteral) => {","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/smt2fuzz/smt2fuzz.rs","byte_start":60578,"byte_end":60589,"line_start":1204,"line_end":1204,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"                    Either::Right(byteLiteral) => {","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":"byte_literal","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `byteLiteral` should have a snake case name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smt2fuzz/smt2fuzz.rs:1204:35\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Either::Right(byteLiteral) => {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `byte_literal`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/smtanalyze/analyzer.rs","byte_start":35975,"byte_end":36024,"line_start":760,"line_end":760,"column_start":17,"column_end":66,"is_primary":true,"text":[{"text":"                env.alloc_seg(&addr, size, &value.unwrap_right());","highlight_start":17,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"src/smtanalyze/analyzer.rs","byte_start":35975,"byte_end":35975,"line_start":760,"line_end":760,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                env.alloc_seg(&addr, size, &value.unwrap_right());","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smtanalyze/analyzer.rs:760:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m760\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                env.alloc_seg(&addr, size, &value.unwrap_right());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m760\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0menv.alloc_seg(&addr, size, &value.unwrap_right());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/smtanalyze/analyzer.rs","byte_start":42468,"byte_end":42517,"line_start":880,"line_end":880,"column_start":17,"column_end":66,"is_primary":true,"text":[{"text":"                env.alloc_seg(&addr, size, &value.unwrap_right());","highlight_start":17,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"src/smtanalyze/analyzer.rs","byte_start":42468,"byte_end":42468,"line_start":880,"line_end":880,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                env.alloc_seg(&addr, size, &value.unwrap_right());","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smtanalyze/analyzer.rs:880:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m880\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                env.alloc_seg(&addr, size, &value.unwrap_right());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m880\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0menv.alloc_seg(&addr, size, &value.unwrap_right());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/smtanalyze/analyzer.rs","byte_start":44259,"byte_end":44313,"line_start":931,"line_end":931,"column_start":17,"column_end":71,"is_primary":true,"text":[{"text":"                env.alloc_seg(&addr, alloc_size, &cell.unwrap_right());","highlight_start":17,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"src/smtanalyze/analyzer.rs","byte_start":44259,"byte_end":44259,"line_start":931,"line_end":931,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                env.alloc_seg(&addr, alloc_size, &cell.unwrap_right());","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smtanalyze/analyzer.rs:931:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m931\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                env.alloc_seg(&addr, alloc_size, &cell.unwrap_right());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m931\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0menv.alloc_seg(&addr, alloc_size, &cell.unwrap_right());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"31 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 31 warnings emitted\u001b[0m\n\n"}
